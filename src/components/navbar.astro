---
import { Icon } from 'astro-icon/components';
import Container from './container.astro';
import Link from './ui/link.astro';

const menuitems = [
  {
    title: 'Inicio',
    path: '#inicio',
  },
  {
    title: 'Funciones',
    path: '#funciones',
  },
  {
    title: 'Interesados',
    path: '#interesados',
  },
  {
    title: 'Marco Legal',
    path: '#legal',
  },
  {
    title: 'Contacto',
    path: '#contacto',
  },
];
---

<Container>
  <header class="flex flex-col lg:flex-row justify-between items-center my-5">
    <div class="flex w-full lg:w-auto items-center justify-between">
      <a href="/" class="text-lg font-bold">
        <span class="text-blue-900">Liquidador</span>
        <span class="text-slate-700">Concursal</span>
      </a>
      <div class="block lg:hidden">
        <button
          id="astronav-menu"
          class="p-2 rounded-md border border-gray-200 hover:bg-gray-50"
          aria-label="Abrir menÃº"
          aria-controls="astronav-items"
          aria-expanded="false"
        >
          <Icon name="tabler:menu" class="w-5 h-5 text-gray-800" />
        </button>
      </div>
    </div>
    <nav id="astronav-items" class="astronav-items hidden w-full lg:w-auto mt-2 lg:flex lg:mt-0">
      <ul class="flex flex-col lg:flex-row lg:gap-3">
        {
          menuitems.map((item, index) => (
            <li>
              <a
                href={item.path}
                class="flex lg:px-3 py-2 text-gray-600 hover:text-gray-900 rounded-md transition-colors duration-300"
              >
                {item.title}
              </a>
            </li>
          ))
        }
      </ul>
      <div class="lg:hidden flex items-center mt-3 gap-4">
        <Link href="#contacto" size="md">Consultar</Link>
      </div>
    </nav>
    <div>
      <div class="hidden lg:flex items-center gap-4">
        <Link href="#contacto" size="md">Consultar</Link>
      </div>
    </div>
  </header>
</Container>

<script>
  // Mobile menu toggle with accessibility and responsive sync
  document.addEventListener('DOMContentLoaded', () => {
    const btn = document.getElementById('astronav-menu');
    const nav = document.getElementById('astronav-items');
    const mq = window.matchMedia('(min-width: 1024px)');

    function setOpen(open: boolean) {
      if (!btn || !nav) return;
      btn.setAttribute('aria-expanded', String(open));
      if (open) {
        nav.classList.remove('hidden');
      } else {
        nav.classList.add('hidden');
      }
    }

    // Ensure correct state on load and when resizing
    function syncWithMedia() {
      if (!btn || !nav) return;
      if (mq.matches) {
        setOpen(true); // desktop always open
      } else {
        setOpen(false); // mobile closed by default
      }
    }

    syncWithMedia();
    mq.addEventListener('change', syncWithMedia);

    btn?.addEventListener('click', () => {
      if (!nav) return;
      const isOpen = !nav.classList.contains('hidden');
      setOpen(!isOpen);
    });

    // Smooth scrolling for anchor links + close menu on mobile after click
    const links = document.querySelectorAll('a[href^="#"]');
    links.forEach((link) => {
      link.addEventListener('click', (e) => {
        const href = link.getAttribute('href') || '';
        const target = document.querySelector(href);
        if (target) {
          e.preventDefault();
          target.scrollIntoView({ behavior: 'smooth', block: 'start' });
          if (!mq.matches) setOpen(false);
        }
      });
    });

    // Scrollspy: set aria-current="page" on active section link
    const navEl = document.getElementById('astronav-items');
    const navLinks = Array.from((navEl || document).querySelectorAll('a[href^="#"]'));

    const sections = navLinks
      .map((a) => {
        const href = a.getAttribute('href') || '';
        if (!href || href === '#') return null;
        const sec = document.querySelector(href);
        return sec ? { id: href, el: sec as HTMLElement, link: a } : null;
      })
      .filter(Boolean);

    function clearAriaCurrent() {
      navLinks.forEach((a) => a.removeAttribute('aria-current'));
    }

    function getActiveSectionId(): string {
      const scrollPos = window.scrollY;
      const offset = 120; // account for header height
      let active = '';
      if (sections.length > 0) {
        const first = sections[0] as unknown as { id: string };
        active = first?.id || '';
      }
      let maxTop = -Infinity;
      sections.forEach((s) => {
        const sec = s as unknown as { id: string; el: HTMLElement };
        const rectTop = sec.el?.getBoundingClientRect?.().top ?? Infinity;
        const top = rectTop + scrollPos - offset;
        if (top <= scrollPos && top > maxTop) {
          maxTop = top;
          active = sec.id;
        }
      });
      return active;
    }

    let ticking = false;
    function onScroll() {
      if (ticking) return;
      ticking = true;
      requestAnimationFrame(() => {
        const activeId = getActiveSectionId();
        clearAriaCurrent();
        const activeLink = navLinks.find((a) => (a.getAttribute('href') || '') === activeId);
        if (activeLink) activeLink.setAttribute('aria-current', 'page');
        ticking = false;
      });
    }

    window.addEventListener('scroll', onScroll, { passive: true });
    window.addEventListener('resize', onScroll);
    // Initialize on load
    onScroll();
  });
</script>

<style>
  /* Prefer Tailwind utilities for layout; no extra CSS needed here */
</style>
